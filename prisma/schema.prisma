// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

// 사용자 모델
model User {
  id        String   @id @default(uuid())
  email     String   @unique
  password  String
  nickname  String
  profileImage String?
  
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  
  // Relations
  travelLogs TravelLog[]
  stories    Story[]
  
  @@map("users")
}

// 여행 기록 모델
model TravelLog {
  id          String   @id @default(uuid())
  userId      String
  lat         Float
  lng         Float
  placeName   String
  country     String
  emotion     String
  photos      String[] // URL 배열
  diary       String   @db.Text
  tags        String[]
  
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  
  // Relations
  user        User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  storyLogs   StoryLog[]
  
  @@index([userId])
  @@index([country])
  @@index([emotion])
  @@index([createdAt])
  @@map("travel_logs")
}

// 여행 스토리 모델
model Story {
  id          String   @id @default(uuid())
  userId      String
  title       String
  description String   @db.Text
  coverImage  String?
  template    String   // 'timeline' | 'map' | 'gallery' | 'mood'
  isPublic    Boolean  @default(false)
  
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  
  // Relations
  user        User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  storyLogs   StoryLog[]
  
  @@index([userId])
  @@index([isPublic])
  @@map("stories")
}

// 스토리와 여행 기록의 중간 테이블
model StoryLog {
  id          String   @id @default(uuid())
  storyId     String
  travelLogId String
  order       Int      @default(0)
  
  createdAt   DateTime @default(now())
  
  // Relations
  story       Story    @relation(fields: [storyId], references: [id], onDelete: Cascade)
  travelLog   TravelLog @relation(fields: [travelLogId], references: [id], onDelete: Cascade)
  
  @@unique([storyId, travelLogId])
  @@index([storyId])
  @@map("story_logs")
}
