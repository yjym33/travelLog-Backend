// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

// 사용자 모델
model User {
  id        String   @id @default(uuid())
  email     String   @unique
  password  String
  nickname  String
  profileImage String?
  
  // 프로필 확장
  bio             String?  @db.Text
  location        String?
  website         String?
  
  // 통계
  friendsCount    Int @default(0)
  
  // 설정
  isPublicProfile Boolean @default(true)
  allowFriendRequests Boolean @default(true)
  
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  
  // Relations
  travelLogs TravelLog[]
  stories    Story[]
  
  // 소셜 기능 Relations
  friendRequestsSent     Friendship[] @relation("FriendRequests")
  friendRequestsReceived Friendship[] @relation("FriendReceived")
  
  travelLogLikes         TravelLogLike[] @relation("TravelLogLikes")
  travelLogComments      TravelLogComment[] @relation("TravelLogComments")
  commentLikes           CommentLike[] @relation("CommentLikes")
  
  sharesMade             TravelLogShare[] @relation("SharesMade")
  sharesReceived         TravelLogShare[] @relation("SharesReceived")
  
  notificationsReceived  Notification[] @relation("NotificationsReceived")
  notificationsMade      Notification[] @relation("NotificationsMade")
  
  @@map("users")
}

// 여행 기록 모델
model TravelLog {
  id          String   @id @default(uuid())
  userId      String
  lat         Float
  lng         Float
  placeName   String
  country     String
  emotion     String
  photos      String[] // URL 배열
  diary       String   @db.Text
  tags        String[]
  
  // 공개 설정
  visibility  ShareVisibility @default(PRIVATE)
  allowComments Boolean @default(true)
  allowLikes    Boolean @default(true)
  
  // 통계
  viewCount     Int @default(0)
  likeCount     Int @default(0)
  commentCount  Int @default(0)
  shareCount    Int @default(0)
  
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  
  // Relations
  user        User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  storyLogs   StoryLog[]
  
  // 소셜 기능 Relations
  likes       TravelLogLike[]
  comments    TravelLogComment[]
  shares      TravelLogShare[]
  
  @@index([userId])
  @@index([country])
  @@index([emotion])
  @@index([createdAt])
  @@index([visibility])
  @@map("travel_logs")
}

// 여행 스토리 모델
model Story {
  id          String   @id @default(uuid())
  userId      String
  title       String
  description String   @db.Text
  coverImage  String?
  template    String   // 'timeline' | 'map' | 'gallery' | 'mood'
  isPublic    Boolean  @default(false)
  
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  
  // Relations
  user        User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  storyLogs   StoryLog[]
  
  @@index([userId])
  @@index([isPublic])
  @@map("stories")
}

// 스토리와 여행 기록의 중간 테이블
model StoryLog {
  id          String   @id @default(uuid())
  storyId     String
  travelLogId String
  order       Int      @default(0)
  
  createdAt   DateTime @default(now())
  
  // Relations
  story       Story    @relation(fields: [storyId], references: [id], onDelete: Cascade)
  travelLog   TravelLog @relation(fields: [travelLogId], references: [id], onDelete: Cascade)
  
  @@unique([storyId, travelLogId])
  @@index([storyId])
  @@map("story_logs")
}

// ============================================
// 소셜 기능 모델들
// ============================================

// 친구 관계
model Friendship {
  id          String   @id @default(uuid())
  requesterId String
  addresseeId String
  status      FriendshipStatus @default(PENDING)
  
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  acceptedAt  DateTime?
  
  // Relations
  requester   User     @relation("FriendRequests", fields: [requesterId], references: [id], onDelete: Cascade)
  addressee   User     @relation("FriendReceived", fields: [addresseeId], references: [id], onDelete: Cascade)
  
  @@unique([requesterId, addresseeId])
  @@index([requesterId])
  @@index([addresseeId])
  @@index([status])
  @@map("friendships")
}

enum FriendshipStatus {
  PENDING
  ACCEPTED
  REJECTED
  BLOCKED
}

enum ShareVisibility {
  PRIVATE
  FRIENDS
  PUBLIC
}

// 여행 기록 공유
model TravelLogShare {
  id          String   @id @default(uuid())
  travelLogId String
  userId      String
  sharedWith  String?
  shareType   ShareType @default(LINK)
  message     String?  @db.Text
  
  createdAt   DateTime @default(now())
  expiresAt   DateTime?
  
  // Relations
  travelLog   TravelLog @relation(fields: [travelLogId], references: [id], onDelete: Cascade)
  user        User      @relation("SharesMade", fields: [userId], references: [id], onDelete: Cascade)
  sharedUser  User?     @relation("SharesReceived", fields: [sharedWith], references: [id], onDelete: Cascade)
  
  @@index([travelLogId])
  @@index([userId])
  @@map("travel_log_shares")
}

enum ShareType {
  LINK
  DIRECT
}

// 좋아요
model TravelLogLike {
  id          String   @id @default(uuid())
  travelLogId String
  userId      String
  
  createdAt   DateTime @default(now())
  
  // Relations
  travelLog   TravelLog @relation(fields: [travelLogId], references: [id], onDelete: Cascade)
  user        User      @relation("TravelLogLikes", fields: [userId], references: [id], onDelete: Cascade)
  
  @@unique([travelLogId, userId])
  @@index([travelLogId])
  @@index([userId])
  @@map("travel_log_likes")
}

// 댓글
model TravelLogComment {
  id          String   @id @default(uuid())
  travelLogId String
  userId      String
  parentId    String?
  content     String   @db.Text
  
  // 통계
  likeCount   Int      @default(0)
  replyCount  Int      @default(0)
  
  isEdited    Boolean  @default(false)
  isDeleted   Boolean  @default(false)
  deletedAt   DateTime?
  
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  
  // Relations
  travelLog   TravelLog @relation(fields: [travelLogId], references: [id], onDelete: Cascade)
  user        User      @relation("TravelLogComments", fields: [userId], references: [id], onDelete: Cascade)
  parent      TravelLogComment? @relation("CommentReplies", fields: [parentId], references: [id], onDelete: Cascade)
  replies     TravelLogComment[] @relation("CommentReplies")
  likes       CommentLike[]
  
  @@index([travelLogId])
  @@index([userId])
  @@index([parentId])
  @@index([createdAt])
  @@map("travel_log_comments")
}

// 댓글 좋아요
model CommentLike {
  id        String   @id @default(uuid())
  commentId String
  userId    String
  
  createdAt DateTime @default(now())
  
  // Relations
  comment   TravelLogComment @relation(fields: [commentId], references: [id], onDelete: Cascade)
  user      User             @relation("CommentLikes", fields: [userId], references: [id], onDelete: Cascade)
  
  @@unique([commentId, userId])
  @@index([commentId])
  @@index([userId])
  @@map("comment_likes")
}

// 알림
model Notification {
  id          String   @id @default(uuid())
  userId      String
  actorId     String?
  type        NotificationType
  entityType  String
  entityId    String
  message     String
  isRead      Boolean  @default(false)
  
  createdAt   DateTime @default(now())
  readAt      DateTime?
  
  // Relations
  user        User     @relation("NotificationsReceived", fields: [userId], references: [id], onDelete: Cascade)
  actor       User?    @relation("NotificationsMade", fields: [actorId], references: [id], onDelete: SetNull)
  
  @@index([userId])
  @@index([isRead])
  @@index([createdAt])
  @@map("notifications")
}

enum NotificationType {
  FRIEND_REQUEST
  FRIEND_ACCEPTED
  TRAVEL_LOG_LIKED
  TRAVEL_LOG_COMMENTED
  COMMENT_REPLIED
  COMMENT_LIKED
  TRAVEL_LOG_SHARED
}
